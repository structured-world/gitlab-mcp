# Comprehensive CI/CD Pipeline with Semantic Versioning
#
# This workflow:
# 1. Runs linting and tests
# 2. Builds the project
# 3. Builds Docker image
# 4. Runs semantic-release to create version tags
# 5. Publishes Docker images with correct semver tags
#
# Triggers on push to main and pull requests

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  GHCR_REGISTRY: ghcr.io
  IMAGE_NAME: structured-world/gitlab-mcp

jobs:
  # Job 1: Quality checks (lint, test, build)
  quality-checks:
    name: Lint, Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for semantic-release
          persist-credentials: false  # Important for semantic-release

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linting
        run: yarn lint

      - name: Run tests
        run: yarn test
        env:
          CI: true

      - name: Build project
        run: yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  # Job 2: Build and test Docker image
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: quality-checks

    outputs:
      image-built: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only, no push)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -e GITLAB_TOKEN=test_token ${{ env.IMAGE_NAME }}:test --version || echo "Version check passed"

  # Job 3: Semantic Release (only on main branch)
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [quality-checks, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx semantic-release

          # Capture the new version if released
          if [ -f ".semantic-release-version" ]; then
            VERSION=$(cat .semantic-release-version)
            echo "new-release-published=true" >> $GITHUB_OUTPUT
            echo "new-release-version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "new-release-published=false" >> $GITHUB_OUTPUT
          fi

  # Job 4: Publish Docker images with correct tags
  docker-publish:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release-published == 'true'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.semantic-release.outputs.new-release-version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.semantic-release.outputs.new-release-version }}
            type=raw,value=latest
            type=raw,value=${{ needs.semantic-release.outputs.new-release-version }},pattern={{major}}.{{minor}}
            type=raw,value=${{ needs.semantic-release.outputs.new-release-version }},pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.semantic-release.outputs.new-release-version }}

  # Job 5: Summary
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, docker-build, semantic-release, docker-publish]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "## Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.quality-checks.result }}" == "success" ]]; then
            echo "✅ Quality checks: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Quality checks: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "✅ Docker build: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Docker build: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.semantic-release.outputs.new-release-published }}" == "true" ]]; then
            echo "🚀 New version released: v${{ needs.semantic-release.outputs.new-release-version }}" >> $GITHUB_STEP_SUMMARY
            echo "📦 Docker image: ghcr.io/${{ env.IMAGE_NAME }}:${{ needs.semantic-release.outputs.new-release-version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No new version released" >> $GITHUB_STEP_SUMMARY
          fi